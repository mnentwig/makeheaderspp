#pragma once
#include <cassert>
#include <fstream>  // ifstream
#include <iostream>
#include <map>
#include <set>
#include <stdexcept>
#include <string>

#include "myAppRegex.h"
#include "oneClass.h"
class codeGen {
    MHPP("begin codeGen") // === autogenerated code. Do not edit ===
    public:
    	codeGen(bool annotate);
    	void pass1(const std::string& fname, bool clean);
    	void pass2(const std::string& fname, bool clean);
    	void pass3(const std::string& fname);
    	// called on declaration regex capture declaration
    	void MHPP_classitem(const std::map<std::string, myAppRegex::range> capt, const std::string& fnameForErrMsg);
    	std::string MHPP_begin(const std::map<std::string, myAppRegex::range>& capt, bool clean);
    	void checkAllClassesDone();
    protected:
    	oneClass& getClass(const std::string& classname);
    	static std::string trimNewline(std::string& text);
    	// called on declaration regex capture that is a function
    	void MHPP_classfun(const std::map<std::string, myAppRegex::range> capt, const std::string& fnameForAnnot);
    	// called on declaration regex capture that is a static variable
    	void MHPP_classvar(const std::map<std::string, myAppRegex::range> capt, const std::string& fnameForAnnot);
    	static ::std::string readFile(const ::std::string& fname);
    MHPP("end codeGen")
   protected:
    ::std::map<::std::string, oneClass> classesByName;
    ::std::map<::std::string, bool> classDone;
    ::std::map<::std::string, ::std::string> filebodyByFilename;
    ::std::set<::std::string> filesNeedRewrite;
    bool annotate;
};
