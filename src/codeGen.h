#pragma once
#include <cassert>
#include <fstream>  // ifstream
#include <iostream>
#include <map>
#include <set>
#include <stdexcept>
#include <string>

#include "myAppRegex.h"
#include "myRegexRange.h"
#include "oneClass.h"
class codeGen {
    MHPP("begin codeGen") // === autogenerated code. Do not edit ===
    public:
    	codeGen(bool annotate);
    	void pass1(const std::string& fname, bool clean);
    	void pass2(const std::string& fname, bool clean);
    	void pass3(const std::string& fname);
    	// called on declaration regex capture declaration
    	void MHPP_classitem(const std::map<std::string, myRegexRange> capt);
    	std::string MHPP_begin(const std::map<std::string, myRegexRange>& capt, bool clean);
    	void checkAllClassesDone();
    protected:
    	bool hasClass(const std::string& classname);
    	oneClass& getClass(const std::string& classname);
    	static std::string trimNewline(std::string& text);
    	// called on declaration regex capture that is a function
    	void MHPP_classfun(const std::map<std::string, myRegexRange> capt);
    	// called on declaration regex capture that is a static variable
    	void MHPP_classvar(const std::map<std::string, myRegexRange> capt);
    	static std::string readFile(const std::string& fname);
    	static std::string join(const std::vector<std::string>& v, const std::string& delim);
    private:
    	static std::string namedCaptAsString(const std::string& name, const std::map<std::string, myRegexRange> capt);
    	static myRegexRange namedCaptAsRange(const std::string& name, const std::map<std::string, myRegexRange> capt);
    	// converts "(int x, map<string, int>y)" to {"x", "y"}
    	static std::vector<std::string> arglist2names(const std::string& arglist);
    	void generatePImpl(const std::string& classname,
    	                            const std::string& retType,
    	                            const std::string& methodname,
    	                            const std::string& pImplClass,
    	                            const std::string& fullArgsWithBrackets,
    	                            const std::string& postArgs);
    MHPP("end codeGen")
   private:
    std::map<std::string, oneClass> classesByName;
    std::map<std::string, bool> classDone;
    std::map<std::string, myRegexRange> filebodyByFilename;
    std::map<std::string, std::string> fileRewriteByName;
	// -annotate command line flag
    bool annotate;
};
