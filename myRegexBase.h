#pragma once
#include <map>
#include <regex>
#include <string>
#include <vector>

#define MHPP(arg)  // arg is for makeheaderspp.exe, to be ignored by compiler
class myRegexBase {
    MHPP("begin myRegexBase") // === autogenerated code. Do not edit ===
    public:
    	static myRegexBase txt(const ::std::string& text);
    	static myRegexBase rx(const ::std::string& re, bool isGroup);
    	static myRegexBase zeroOrMore_greedy(const myRegexBase& arg);
    	static myRegexBase zeroOrMore_lazy(const myRegexBase& arg);
    	static myRegexBase zeroOrOne_greedy(const myRegexBase& arg);
    	static myRegexBase zeroOrOne_lazy(const myRegexBase& arg);
    	static myRegexBase capture(const myRegexBase& arg, const ::std::string& captName);
    	::std::string getNamedCapture(const ::std::string& name, const ::std::smatch& m) const;
    	myRegexBase operator+(const myRegexBase& arg) const;
    	myRegexBase operator|(const myRegexBase& arg) const;
    	::std::string getExpr() const;
    protected:
    	myRegexBase(const ::std::string& expr, bool isGroup);
    	myRegexBase makeGrp() const;
    	myRegexBase changeExpr(const ::std::string& newExpr, bool isGroup) const;
    MHPP("end myRegexBase")
   public:
    operator ::std::regex();

   protected:
    // expression in human-readable regex format
    ::std::string expr;
    // whether or not expr needs to be enclosed in group before a quantifier e.g. * is applied
    bool isGroup;
    // named captures in order of appearance
    ::std::vector<::std::string> captureNames;
};