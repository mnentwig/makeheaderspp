#pragma once
#include <string>
#include <vector>

#define MHPP(arg) // arg is for makeheaderspp.exe, to be ignored by compiler
class myRegexBase {
    MHPP("begin myRegexBase") // === autogenerated code. Do not edit ===
    public:
    	static myRegexBase txt(const ::std::string& text);
    	myRegexBase operator+(const myRegexBase& arg) const;
    	myRegexBase operator|(const myRegexBase& arg) const;
    	static myRegexBase rx(const ::std::string& re, bool isGroup);
    	static myRegexBase zeroOrMore_greedy(const myRegexBase& arg);
    	static myRegexBase zeroOrMore_nonGreedy(const myRegexBase& arg);
    	myRegexBase capture(const ::std::string& captName);
    protected:
    	myRegexBase(const ::std::string& expr, bool isGroup);
    	myRegexBase makeGrp() const;
    	myRegexBase changeExpr(const string& newExpr, bool isGroup);
    MHPP("end myRegexBase")
   protected:
   // expression in human-readable regex format
    ::std::string expr;
    // whether or not expr needs to be enclosed in group before a quantifier e.g. * is applied 
    bool isGroup;
    // named captures in order of appearance
    ::std::vector<::std::string> captureNames;
};